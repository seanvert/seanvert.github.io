(undo-tree-save-format-version . 1)
"7014a3939a5d74c0001317cd460c16f1e0eb46c5"
[nil nil nil nil (25928 54289 392740 830000) 0 nil]
([nil nil ((103 . 105) (t 25928 19375 525516 861000)) nil (25928 54289 392739 209000) 0 nil])
([nil nil ((105 . 118)) nil (25928 54289 392737 593000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t)) . -116) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("c" 0 1 (fontified t)) . -117) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 118) nil (25928 54289 392733 996000) 0 nil])
([nil nil ((116 . 131)) nil (25928 54289 392687 356000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -114) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 115 (t 25928 54289 391992 968000)) nil (25928 54292 794942 249000) 0 nil])
([nil nil ((114 . 115)) nil (25928 54292 794906 335000) 0 nil])
([nil nil ((1051 . 1052) (t 25928 54292 792040 725000)) nil (25928 54662 158332 826000) 0 nil])
([nil nil ((135 . 136)) nil (25928 54662 158331 645000) 0 nil])
([nil nil ((nil rear-nonsticky nil 176 . 177) (nil fontified nil 176 . 177) (nil fontified nil 175 . 176) (nil fontified nil 174 . 175) (nil fontified nil 173 . 174) (nil fontified nil 172 . 173) (nil fontified nil 166 . 172) (nil fontified nil 161 . 166) (nil fontified nil 160 . 161) (nil fontified nil 159 . 160) (nil fontified nil 158 . 159) (nil fontified nil 157 . 158) (nil fontified nil 156 . 157) (nil fontified nil 137 . 156) (nil fontified nil 136 . 137) (136 . 177)) nil (25928 54662 158329 867000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -167) (undo-tree-id50 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -168) (undo-tree-id51 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -169) (undo-tree-id52 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -170) (undo-tree-id53 . -1) 171) nil (25928 54662 158325 371000) 0 nil])
([nil nil ((167 . 172)) nil (25928 54662 158318 721000) 0 nil])
([nil nil ((#("theme" 0 5 (fontified t)) . 137) (undo-tree-id49 . -5)) nil (25928 54662 158317 95000) 0 nil])
([nil nil ((#(" documentation" 0 14 (fontified t)) . 137) (undo-tree-id48 . -14)) nil (25928 54662 158313 641000) 0 nil])
([nil nil ((137 . 142)) nil (25928 54662 158299 285000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -1080) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 1081 (t 25928 54662 157228 557000)) nil (25928 55469 984099 601000) 0 nil])
([nil nil ((#("[Posts]({{< ref \"posts\" >}})" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-builtin-face fontified t) 11 16 (fontified t) 16 23 (face font-lock-string-face fontified t) 23 24 (fontified t) 24 25 (face font-lock-builtin-face fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t)) . 136) (undo-tree-id294 . -9) (undo-tree-id295 . -9) (undo-tree-id296 . -9) (undo-tree-id297 . -9) (undo-tree-id298 . -9) (undo-tree-id299 . -9) (undo-tree-id300 . -9) (undo-tree-id301 . -9) (undo-tree-id302 . -9) (undo-tree-id303 . -9) (undo-tree-id304 . -9) (undo-tree-id305 . -9) (undo-tree-id306 . -9) (undo-tree-id307 . -9) (undo-tree-id308 . -9) (undo-tree-id309 . -9) (undo-tree-id310 . -9) (undo-tree-id311 . -9) (undo-tree-id312 . -9) (undo-tree-id313 . -9) (undo-tree-id314 . -9) (undo-tree-id315 . -9) (undo-tree-id316 . -9) (undo-tree-id317 . -28) (t 25928 55469 981922 882000)) nil (25928 61598 156947 472000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1)) nil (25928 61598 156922 411000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id284 . -1)) nil (25928 61598 156906 89000) 0 nil])
([nil nil ((#("This is a demo site built entirely using Blowfish. It also contains a complete set of [theme documentation]({{< ref \"docs\" >}}). Blowfish is flexible and is great for both static page-based content (like this demo) or a traditional blog with a feed of recent posts." 0 86 (fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-1-face) fontified t) 107 108 (face (rainbow-delimiters-depth-1-face) fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 110 (face (rainbow-delimiters-depth-3-face) fontified t) 110 111 (face font-lock-builtin-face fontified t) 111 116 (fontified t) 116 122 (face font-lock-string-face fontified t) 122 123 (fontified t) 123 124 (face font-lock-builtin-face fontified t) 124 125 (face (rainbow-delimiters-depth-3-face) fontified t) 125 126 (face (rainbow-delimiters-depth-2-face) fontified t) 126 127 (face (rainbow-delimiters-depth-1-face) fontified t) 127 163 (fontified t) 163 166 (face font-lock-keyword-face fontified t) 166 183 (fontified t) 183 184 (face font-lock-builtin-face fontified t) 184 198 (fontified t) 198 199 (face (rainbow-delimiters-depth-1-face) fontified t) 199 213 (fontified t) 213 214 (face (rainbow-delimiters-depth-1-face) fontified t) 214 265 (fontified t)) . 136) (undo-tree-id258 . -86) (undo-tree-id259 . -197) (undo-tree-id260 . -197) (undo-tree-id261 . -197) (undo-tree-id262 . -197) (undo-tree-id263 . -197) (undo-tree-id264 . -197) (undo-tree-id265 . -197) (undo-tree-id266 . -197) (undo-tree-id267 . -103) (undo-tree-id268 . -103) (undo-tree-id269 . -103) (undo-tree-id270 . -103) (undo-tree-id271 . -103) (undo-tree-id272 . -103) (undo-tree-id273 . -103) (undo-tree-id274 . -103) (undo-tree-id275 . -9) (undo-tree-id276 . -9) (undo-tree-id277 . -9) (undo-tree-id278 . -9) (undo-tree-id279 . -9) (undo-tree-id280 . -9) (undo-tree-id281 . -9) (undo-tree-id282 . -9) (undo-tree-id283 . -265)) nil (25928 61598 156902 308000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1)) nil (25928 61598 156876 969000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id246 . -1)) nil (25928 61598 156864 891000) 0 nil])
([nil nil ((#("<div class=\"flex px-4 py-2 mb-8 text-base rounded-md bg-primary-100 dark:bg-primary-900\">" 0 1 (face font-lock-builtin-face fontified t) 1 10 (fontified t) 10 11 (face font-lock-builtin-face fontified t) 11 88 (face font-lock-string-face fontified t) 88 89 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id237 . -30) (undo-tree-id238 . -9) (undo-tree-id239 . -9) (undo-tree-id240 . -9) (undo-tree-id241 . -9) (undo-tree-id242 . -9) (undo-tree-id243 . -9) (undo-tree-id244 . -9) (undo-tree-id245 . -89)) nil (25928 61598 156862 173000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id236 . -1)) nil (25928 61598 156852 26000) 0 nil])
([nil nil ((#("  <span class=\"flex items-center ltr:pr-3 rtl:pl-3 text-primary-400\">" 0 2 (fontified t) 2 3 (face font-lock-builtin-face fontified t) 3 13 (fontified t) 13 14 (face font-lock-builtin-face fontified t) 14 68 (face font-lock-string-face fontified t) 68 69 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id228 . -9) (undo-tree-id229 . -9) (undo-tree-id230 . -9) (undo-tree-id231 . -9) (undo-tree-id232 . -9) (undo-tree-id233 . -9) (undo-tree-id234 . -9) (undo-tree-id235 . -69)) nil (25928 61598 156849 157000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id227 . -1)) nil (25928 61598 156839 522000) 0 nil])
([nil nil ((#("    {{< icon \"triangle-exclamation\" >}}" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face font-lock-builtin-face fontified t) 7 13 (fontified t) 13 35 (face font-lock-string-face fontified t) 35 36 (fontified t) 36 37 (face font-lock-builtin-face fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t)) . 136) (undo-tree-id219 . -9) (undo-tree-id220 . -9) (undo-tree-id221 . -9) (undo-tree-id222 . -9) (undo-tree-id223 . -9) (undo-tree-id224 . -9) (undo-tree-id225 . -9) (undo-tree-id226 . -39)) nil (25928 61598 156836 874000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id218 . -1)) nil (25928 61598 156827 993000) 0 nil])
([nil nil ((#("  </span>" 0 2 (fontified t) 2 3 (face font-lock-builtin-face fontified t) 3 4 (face font-lock-builtin-face fontified t) 4 8 (fontified t) 8 9 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -9) (undo-tree-id215 . -9) (undo-tree-id216 . -9) (undo-tree-id217 . -9)) nil (25928 61598 156825 205000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id208 . -1) (undo-tree-id209 . -1)) nil (25928 61598 156811 675000) 0 nil])
([nil nil ((#("  <span class=\"flex items-center justify-between grow dark:text-neutral-300\">" 0 2 (fontified t) 2 3 (face font-lock-builtin-face fontified t) 3 13 (fontified t) 13 14 (face font-lock-builtin-face fontified t) 14 76 (face font-lock-string-face fontified t) 76 77 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id200 . -9) (undo-tree-id201 . -9) (undo-tree-id202 . -9) (undo-tree-id203 . -9) (undo-tree-id204 . -9) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (undo-tree-id207 . -77)) nil (25928 61598 156808 189000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id199 . -1)) nil (25928 61598 156799 283000) 0 nil])
([nil nil ((#("    <span class=\"prose dark:prose-invert\">This is a demo of the <code id=\"layout\">background</code> layout.</span>" 0 4 (fontified t) 4 5 (face font-lock-builtin-face fontified t) 5 15 (fontified t) 15 16 (face font-lock-builtin-face fontified t) 16 41 (face font-lock-string-face fontified t) 41 42 (face font-lock-builtin-face fontified t) 42 64 (fontified t) 64 65 (face font-lock-builtin-face fontified t) 65 72 (fontified t) 72 73 (face font-lock-builtin-face fontified t) 73 81 (face font-lock-string-face fontified t) 81 82 (face font-lock-builtin-face fontified t) 82 92 (fontified t) 92 93 (face font-lock-builtin-face fontified t) 93 94 (face font-lock-builtin-face fontified t) 94 98 (fontified t) 98 99 (face font-lock-builtin-face fontified t) 99 107 (fontified t) 107 108 (face font-lock-builtin-face fontified t) 108 109 (face font-lock-builtin-face fontified t) 109 113 (fontified t) 113 114 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id182 . -103) (undo-tree-id183 . -103) (undo-tree-id184 . -103) (undo-tree-id185 . -103) (undo-tree-id186 . -103) (undo-tree-id187 . -103) (undo-tree-id188 . -103) (undo-tree-id189 . -103) (undo-tree-id190 . -9) (undo-tree-id191 . -9) (undo-tree-id192 . -9) (undo-tree-id193 . -9) (undo-tree-id194 . -9) (undo-tree-id195 . -9) (undo-tree-id196 . -9) (undo-tree-id197 . -9) (undo-tree-id198 . -114)) nil (25928 61598 156796 202000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id181 . -1)) nil (25928 61598 156778 446000) 0 nil])
([nil nil ((#("    <button" 0 4 (fontified t) 4 5 (face font-lock-builtin-face fontified t) 5 11 (fontified t)) . 136) (undo-tree-id173 . -9) (undo-tree-id174 . -9) (undo-tree-id175 . -9) (undo-tree-id176 . -9) (undo-tree-id177 . -9) (undo-tree-id178 . -9) (undo-tree-id179 . -9) (undo-tree-id180 . -11)) nil (25928 61598 156775 698000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id172 . -1)) nil (25928 61598 156766 31000) 0 nil])
([nil nil ((#("      id=\"switch-layout-button\"" 0 8 (fontified t) 8 9 (face font-lock-builtin-face fontified t) 9 31 (face font-lock-string-face fontified t)) . 136) (undo-tree-id163 . -9) (undo-tree-id164 . -9) (undo-tree-id165 . -9) (undo-tree-id166 . -9) (undo-tree-id167 . -9) (undo-tree-id168 . -9) (undo-tree-id169 . -9) (undo-tree-id170 . -9) (undo-tree-id171 . -31)) nil (25928 61598 156761 940000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id162 . -1)) nil (25928 61598 156640 721000) 0 nil])
([nil nil ((#("      class=\"px-4 !text-neutral !no-underline rounded-md bg-primary-600 hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"" 0 11 (fontified t) 11 12 (face font-lock-builtin-face fontified t) 12 141 (face font-lock-string-face fontified t)) . 136) (undo-tree-id145 . -103) (undo-tree-id146 . -103) (undo-tree-id147 . -103) (undo-tree-id148 . -103) (undo-tree-id149 . -103) (undo-tree-id150 . -103) (undo-tree-id151 . -103) (undo-tree-id152 . -103) (undo-tree-id153 . -9) (undo-tree-id154 . -9) (undo-tree-id155 . -9) (undo-tree-id156 . -9) (undo-tree-id157 . -9) (undo-tree-id158 . -9) (undo-tree-id159 . -9) (undo-tree-id160 . -9) (undo-tree-id161 . -141)) nil (25928 61598 156637 445000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id144 . -1)) nil (25928 61598 156618 337000) 0 nil])
([nil nil ((#("    >" 0 4 (fontified t) 4 5 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -5)) nil (25928 61598 156615 527000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id134 . -1)) nil (25928 61598 156603 127000) 0 nil])
([nil nil ((#("      Switch layout &orarr;" 0 20 (fontified t) 20 21 (face font-lock-builtin-face fontified t) 21 26 (fontified t) 26 27 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id126 . -9) (undo-tree-id127 . -9) (undo-tree-id128 . -9) (undo-tree-id129 . -9) (undo-tree-id130 . -9) (undo-tree-id131 . -9) (undo-tree-id132 . -9) (undo-tree-id133 . -27)) nil (25928 61598 156600 407000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id125 . -1)) nil (25928 61598 156591 134000) 0 nil])
([nil nil ((#("    </button>" 0 4 (fontified t) 4 5 (face font-lock-builtin-face fontified t) 5 6 (face font-lock-builtin-face fontified t) 6 12 (fontified t) 12 13 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id117 . -9) (undo-tree-id118 . -9) (undo-tree-id119 . -9) (undo-tree-id120 . -9) (undo-tree-id121 . -9) (undo-tree-id122 . -9) (undo-tree-id123 . -9) (undo-tree-id124 . -13)) nil (25928 61598 156588 382000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id116 . -1)) nil (25928 61598 156579 60000) 0 nil])
([nil nil ((#("  </span>" 0 2 (fontified t) 2 3 (face font-lock-builtin-face fontified t) 3 4 (face font-lock-builtin-face fontified t) 4 8 (fontified t) 8 9 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id94 . -9) (undo-tree-id95 . -9) (undo-tree-id96 . -9) (undo-tree-id97 . -9) (undo-tree-id98 . -9) (undo-tree-id99 . -9) (undo-tree-id100 . -9) (undo-tree-id101 . -9) (undo-tree-id102 . -9) (undo-tree-id103 . -9) (undo-tree-id104 . -9) (undo-tree-id105 . -9) (undo-tree-id106 . -9) (undo-tree-id107 . -9) (undo-tree-id108 . -9) (undo-tree-id109 . -9) (undo-tree-id110 . -9) (undo-tree-id111 . -9) (undo-tree-id112 . -9) (undo-tree-id113 . -9) (undo-tree-id114 . -9) (undo-tree-id115 . -9)) nil (25928 61598 156575 555000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id92 . -1) (undo-tree-id93 . -1)) nil (25928 61598 156553 187000) 0 nil])
([nil nil ((#("</div>" 0 1 (face font-lock-builtin-face fontified t) 1 2 (face font-lock-builtin-face fontified t) 2 5 (fontified t) 5 6 (face font-lock-builtin-face fontified t)) . 136) (undo-tree-id91 . -6)) nil (25928 61598 156549 618000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id90 . -1)) nil (25928 61598 156547 150000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id89 . -1)) nil (25928 61598 156544 555000) 0 nil])
([nil nil ((#("Explore the [sample pages]({{< ref \"samples\" >}}) to get a feel for what Blowfish can do. If you like what you see, check out the project on <a target=\"_blank\" href=\"https://github.com/nunocoracao/blowfish\">Github</a> or read the [Installation guide]({{< ref \"docs/installation\" >}}) to get started." 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face font-lock-builtin-face fontified t) 30 35 (fontified t) 35 44 (face font-lock-string-face fontified t) 44 45 (fontified t) 45 46 (face font-lock-builtin-face fontified t) 46 47 (face (rainbow-delimiters-depth-3-face) fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 64 (fontified t) 64 67 (face font-lock-keyword-face fontified t) 67 86 (fontified t) 86 88 (face font-lock-keyword-face fontified t) 88 114 (fontified t) 114 115 (face font-lock-builtin-face fontified t) 115 141 (fontified t) 141 142 (face font-lock-builtin-face fontified t) 142 150 (fontified t) 150 151 (face font-lock-builtin-face fontified t) 151 159 (face font-lock-string-face fontified t) 159 164 (fontified t) 164 165 (face font-lock-builtin-face fontified t) 165 206 (face font-lock-string-face fontified t) 206 207 (face font-lock-builtin-face fontified t) 207 213 (fontified t) 213 214 (face font-lock-builtin-face fontified t) 214 215 (face font-lock-builtin-face fontified t) 215 216 (fontified t) 216 217 (face font-lock-builtin-face fontified t) 217 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-1-face) fontified t) 231 249 (fontified t) 249 250 (face (rainbow-delimiters-depth-1-face) fontified t) 250 251 (face (rainbow-delimiters-depth-1-face) fontified t) 251 252 (face (rainbow-delimiters-depth-2-face) fontified t) 252 253 (face (rainbow-delimiters-depth-3-face) fontified t) 253 254 (face font-lock-builtin-face fontified t) 254 259 (fontified t) 259 278 (face font-lock-string-face fontified t) 278 279 (fontified t) 279 280 (face font-lock-builtin-face fontified t) 280 281 (face (rainbow-delimiters-depth-3-face) fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 283 (face (rainbow-delimiters-depth-1-face) fontified t) 283 299 (fontified t)) . 136) (undo-tree-id87 . -299) (undo-tree-id88 . -299)) nil (25928 61598 156541 516000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 136) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1)) nil (25928 61598 156534 956000) 0 nil])
([nil nil ((#("Welcome" 0 7 (face font-lock-string-face fontified t)) . 13) (t 25928 61598 156305 433000)) nil (25930 58189 639254 216000) 0 nil])
([nil nil ((#(" to" 0 3 (face font-lock-string-face fontified t)) . 13)) nil (25930 58189 639252 69000) 0 nil])
([nil nil ((#(" Blowfish" 0 9 (face font-lock-string-face fontified t)) . 13)) nil (25930 58189 639250 335000) 0 nil])
([nil nil ((13 . 14)) nil (25930 58189 639248 870000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-string-face fontified t)) . -13) (undo-tree-id117 . -1) 14) nil (25930 58189 639246 431000) 0 nil])
([nil nil ((13 . 15)) nil (25930 58189 639243 378000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-string-face fontified t)) . -13) (undo-tree-id115 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -14) (undo-tree-id116 . -1) 15) nil (25930 58189 639241 353000) 0 nil])
([nil nil ((13 . 16)) nil (25930 58189 639237 445000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-string-face fontified t)) . -13) (undo-tree-id112 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -14) (undo-tree-id113 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -15) (undo-tree-id114 . -1) 16) nil (25930 58189 639235 617000) 0 nil])
([nil nil ((13 . 21)) nil (25930 58189 639230 463000) 0 nil])
([nil nil ((21 . 22)) nil (25930 58189 639229 217000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -21) (undo-tree-id111 . -1) 22) nil (25930 58189 639227 646000) 0 nil])
([nil nil ((21 . 27)) nil (25930 58189 639225 80000) 0 nil])
([nil nil ((#("This" 0 4 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639223 805000) 0 nil])
([nil nil ((#(" is" 0 3 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639222 644000) 0 nil])
([nil nil ((#(" a" 0 2 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639221 186000) 0 nil])
([nil nil ((#(" demo" 0 5 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639220 21000) 0 nil])
([nil nil ((#(" of" 0 3 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639218 493000) 0 nil])
([nil nil ((#(" the" 0 4 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639217 96000) 0 nil])
([nil nil ((#(" Blowfish" 0 9 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639215 836000) 0 nil])
([nil nil ((#(" theme" 0 6 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639214 245000) 0 nil])
([nil nil ((#(" for" 0 4 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639212 722000) 0 nil])
([nil nil ((#(" Hugo" 0 5 (face font-lock-string-face fontified t)) . 51)) nil (25930 58189 639211 257000) 0 nil])
([nil nil ((#(" stuff" 0 6 (face font-lock-string-face fontified t)) . 21)) nil (25930 58189 639209 725000) 0 nil])
([nil nil ((45 . 49)) nil (25930 58189 639208 413000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-string-face fontified t)) . -45) (undo-tree-id107 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -46) (undo-tree-id108 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -47) (undo-tree-id109 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -48) (undo-tree-id110 . -1) 49) nil (25930 58189 639206 214000) 0 nil])
([nil nil ((45 . 55)) nil (25930 58189 639199 957000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -50) (undo-tree-id102 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -51) (undo-tree-id103 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -52) (undo-tree-id104 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -53) (undo-tree-id105 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -54) (undo-tree-id106 . -1) 55) nil (25930 58189 639196 833000) 0 nil])
([nil nil ((50 . 57)) nil (25930 58189 639188 659000) 0 nil])
([nil nil ((57 . 69)) nil (25930 58189 639187 343000) 0 nil])
([nil nil ((#("livestream" 0 10 (face font-lock-string-face fontified t)) . -59) (undo-tree-id101 . -10) 69) nil (25930 58189 639185 946000) 0 nil])
([nil nil ((#("minha " 0 6 (face font-lock-string-face fontified t)) . -53) (undo-tree-id100 . -6) 59) nil (25930 58189 639183 53000) 0 nil])
([nil nil ((53 . 56)) nil (25930 58189 639180 589000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -53) (undo-tree-id97 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -54) (undo-tree-id98 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -55) (undo-tree-id99 . -1) 56) nil (25930 58189 639178 307000) 0 nil])
([nil nil ((53 . 58)) nil (25930 58189 639085 652000) 0 nil])
([nil nil ((#("lives" 0 5 (face font-lock-string-face fontified t)) . -53) (undo-tree-id96 . -5) 58) nil (25930 58189 639084 46000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -50) (undo-tree-id93 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -51) (undo-tree-id94 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -52) (undo-tree-id95 . -1) 53) nil (25930 58189 639080 762000) 0 nil])
([nil nil ((#("Site " 0 5 (face font-lock-string-face fontified t)) . -45) (undo-tree-id92 . -5) 50) nil (25930 58189 639075 907000) 0 nil])
([nil nil ((45 . 61)) nil (25930 58189 639073 432000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -60) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 61) nil (25930 58189 639071 677000) 0 nil])
([nil nil ((60 . 63)) nil (25930 58189 639063 278000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -60) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -61) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -62) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 63) nil (25930 58189 639058 776000) 0 nil])
([nil nil ((60 . 67)) nil (25930 58189 638873 356000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -65) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -66) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 67) nil (25930 58189 638869 399000) 0 nil])
([nil nil ((65 . 79)) nil (25930 58189 638816 384000) 0 nil])
([nil nil ((#("live" 0 4 (face font-lock-string-face fontified t)) . -75) (undo-tree-id644 . -4) (undo-tree-id645 . -4) (undo-tree-id646 . -4) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -4) (undo-tree-id650 . -4) (undo-tree-id651 . -4) 79 (t 25930 58189 636812 246000)) nil (25930 58198 779292 525000) 0 nil])
([nil nil ((#("da " 0 3 (face font-lock-string-face fontified t)) . -72) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) 75) nil (25930 58198 779282 413000) 0 nil])
([nil nil ((#("coisas " 0 7 (face font-lock-string-face fontified t)) . -65) (undo-tree-id610 . -7) (undo-tree-id611 . -7) (undo-tree-id612 . -7) (undo-tree-id613 . -7) (undo-tree-id614 . -7) (undo-tree-id615 . -7) (undo-tree-id616 . -7) (undo-tree-id617 . -7) (undo-tree-id618 . -7) (undo-tree-id619 . -7) (undo-tree-id620 . -7) (undo-tree-id621 . -7) (undo-tree-id622 . -7) (undo-tree-id623 . -7) (undo-tree-id624 . -7) (undo-tree-id625 . -7) (undo-tree-id626 . -7) (undo-tree-id627 . -7) (undo-tree-id628 . -7) (undo-tree-id629 . -7) 72) nil (25930 58198 779267 642000) 0 nil])
([nil nil ((#("e " 0 2 (face font-lock-string-face fontified t)) . -63) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . -2) (undo-tree-id592 . -2) (undo-tree-id593 . -2) (undo-tree-id594 . -2) (undo-tree-id595 . -2) (undo-tree-id596 . -2) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -2) (undo-tree-id600 . -2) (undo-tree-id601 . -2) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) (undo-tree-id605 . -2) (undo-tree-id606 . -2) (undo-tree-id607 . -2) (undo-tree-id608 . -2) (undo-tree-id609 . -2) 65) nil (25930 58198 779246 351000) 0 nil])
([nil nil ((63 . 73)) nil (25930 58198 779199 874000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -65) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -66) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -67) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -68) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -69) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -70) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -71) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -72) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) 73) nil (25930 58198 779180 404000) 0 nil])
([nil nil ((65 . 67)) nil (25930 58198 778528 335000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -65) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -66) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 67) nil (25930 58198 778525 533000) 0 nil])
([nil nil ((65 . 69)) nil (25930 58198 778495 811000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -67) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -68) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 69) nil (25930 58198 778491 986000) 0 nil])
([nil current ((67 . 88)) nil (25930 58198 778451 240000) 0 nil])
nil
